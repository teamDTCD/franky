//Definition of the pins
//Define pins necessary for H-Bridge
int enable_1 = 7; 
int enable_2 = 8;
int input_1 = 3;
int input_2 = 4;
int input_3 = 5;
int input_4 = 6;
//Define pins necessary for Line Sensor
int line_sensor=12;
//Defin pins necessary for Object Sensor
#define object_sensor A0
int detect = 0; //detect variable declared here, feel free to clean up/make global
void setup() {
   //initialise line sensor, object detect and motors
  pinMode(line_sensor, INPUT);
  pinMode(object_sensor, INPUT);
  //pinMode(irLedPin, OUTPUT);
  pinMode(input_1, OUTPUT);
  pinMode(input_2, OUTPUT);
  pinMode(input_3, OUTPUT);
  pinMode(input_4, OUTPUT);
  digitalWrite(enable_1, HIGH);
  digitalWrite(enable_2, HIGH); 
  // put your setup code here, to run once:
  Serial.begin(9600);
  delay(100);
  attachInterrupt(digitalPinToInterrupt(12), reverse(), HIGH);
}
void loop() {
  // put your main code here, to run repeatedly:
  int detect = object_detect();
  int line_true = line_detect();
  if ((line_true == 0) && (detect == 0))  {
    //rotate the robot 1 for true
    rotate(1);
    delay(500);
    //Serial.print("rotate");
  }
  if ((line_true ==1){
    //move the robot backwards
    rotate(0);
    straight_line(0);
    reverse(1);
    delay(500);
    
  }

  if ((line_true == 0) && (detect ==1)) {
    //stop rotating and call the straight line function
    rotate(0);
    reverse();
    straight_line(1); 
  }
}

int object_detect() {


    const int threshold=500; //value for max detection range
    uint16_t value = analogRead (object_sensor); //read analogue pin
    uint16_t range = get_gp2d12 (value); //call function
    Serial.println (value);
    Serial.print (range);
    Serial.println (" mm");
    Serial.println ();
    delay (500);
    if (range < threshold) { // range set to 200mm, adjust as necessary but beware of objects outside of ring
    //might need to replace with return since that's what was used in the original code
       detect = 1;
    } else {
    detect = 0;
    }
    return detect;
}
    
uint16_t get_gp2d12 (uint16_t value) { //function for distance in mm, voltage to mm
if (value < 10) value = 10;
return ((67870.0 / (value - 3.0)) - 40.0); //equation, not ours, from example on a website, probably not same model
}

int line_detect() {
  //function to detect if the edge of the ring has been met. Return 1 for white i.e. edge has been met. Return 0 otherwise
  int line_state = digitalRead(line_sensor);
  int line_true;
  if (line_state == 0) {
    line_true = 0;
    Serial.println("black");
  }
  else {
    line_true = 1;
    Serial.println("white");
  }
  return line_true;
}
void straight_line(int drive_check) {
  //going to make this go forward-first deal with one side
  //put inside an if block to make this stop and start at will
  if (drive_check == 1) {
    digitalWrite(input_1, HIGH);
    digitalWrite(input_2, LOW);
    //now deal with the other side
    digitalWrite(input_3, HIGH);
    digitalWrite(input_4, LOW);
  }
  else {
    digitalWrite(input_1, LOW);
    digitalWrite(input_2, LOW);
    digitalWrite(input_3, LOW);
    digitalWrite(input_4, LOW);
  }
 }
void reverse(int reverse_check) {
  //going to make this go backwards-first deal with one side
  //put inside an if block to stop and start at will
  if (reverse_check == 1) {
  digitalWrite(input_1, LOW);
  digitalWrite(input_2, HIGH);
  //now deal with the other side
  digitalWrite(input_3, LOW);
  digitalWrite(input_4, HIGH);
  delay(500);
  }
  else {
  digitalWrite(input_1, LOW);
  digitalWrite(input_2, LOW);
  digitalWrite(input_3, LOW);
  digitalWrite(input_4, LOW);
  delay(500);
  }
}
void rotate(int check) {
  //put inside an if statement so that we can stop and start at will.
  //idea here is to make one wheel turn one way and the other wheel turn the other way
  //check is 1 for rotate, 0 otherwise
  if (check == 1) {
  //turn one wheel forward
  digitalWrite(input_1, HIGH);
  digitalWrite(input_2, LOW);
  //turn the other wheel backwards
  digitalWrite(input_3, LOW);
  digitalWrite(input_4, HIGH);
  }
else {
  digitalWrite(input_1, LOW);
  digitalWrite(input_2, LOW);
  //turn the other wheel backwards
  digitalWrite(input_3, LOW);
  digitalWrite(input_4, LOW);
  }
}
